## get and post

1)  What is the difference between get and post?

    get: e.g. the client makes a get request when loading a page. The server(your app)
    knows the path and can creates a respone (e.g. a welcome page). There is NO
    data changed on server side, no database updates

    post: e.g. the client fills out a register form. Which means that there
    should be database queries and updates if the form is valid. Use post for that,
    because you don't want the clients data being shown in the url. And sometimes
    the browser makes random get requests, which would be not good when we try to save
    data with get requests.

2)  When to use self.request and self.response on application side?

    self.request is what the server request from the browser(client). This could be
    any data in the url or data inside the http header

    self.response what you would like to send to the browser(client). This could be
    an html form, data, text and so on. And inside the html for example you can then
    use the data to display it to the client with jinja2 or any other template engine.

## cookies

1)  Why cookies?

    cookies hand hold little piece of data. that way we dont always have to look up in the database if the user is logged in, we can store
    inside the browser and retrieve the information from the browser. 

2) What is the difference between "Cookie" and "Set-Cookie" in the Response or Request Header of the Browser?


## hash and salt

1)  What is hash?

    h(x) = y

    x is e.g. your original password. y is the output created by the hash algorithm.
    Its very difficult to get your original password x, when you only know y.
    So hashing is used for security reasons. But there is a problem.
    You can still use a brute force attack, hash the results and you will get the hashes.
    Or there is a big table called the rainbow table where a lot of hashes a already stored
    for common passwords and strings. So you can just take the password hash,
    search for it in the rainbow table and get the original password. A solution to that
    would be salt or other algorithms like bcrypt.

2)  What is salt?

    The salt is stored inside the database, next to the hashed password.
    A hacker retrieves the salt and password hash. Then he can recreate the
    original password, right? Why use salt then?

    Because the salt is created unique for each user. So it is almost impossible
    to find the original text inside rainbow-tables, because of this unique salt.

    -)  example one - table without salt

        user      |     password hash
        "dave"    |     "5abghd" (e.g original password "my_password123")

        -> look for "5abghd" inside rainbow table and get password


    -)  example two - table with salt

        user      |     password hash
        "dave"    |     "7dfjok","randomsalt" (e.g original password "my_password123")

        ->  look for "7dfjok" inside rainbow table and you will not be able to find
        the password because every user has his unique salt, so every hash is
        completely different and makes re-creation almost impossible
